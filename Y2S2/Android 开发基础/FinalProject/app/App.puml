@startuml
'https://plantuml.com/class-diagram

package finalproject {
    class MainActivity {
        override fun onCreate(savedInstanceState: Bundle?)
    }

    package dao {
        class EventDao {
            suspend fun getAllEvents(): List<Event>
            suspend fun getEventByTime(user: String, stime: Long, etime: Long): List<Event>
            suspend fun getUserEvent(user: String): List<Event>
            suspend fun clearUserEvents(user: String)
            suspend fun clearEvents()
            suspend fun insertEvent(event: Event)
            suspend fun deleteEvent(event: Event)
            suspend fun update(event: Event)
        }
        class NoteDao {
            suspend fun getAllNotes(): List<Note>
            suspend fun searchNotesByTitle(user: String, keyword: String): List<Note>
            suspend fun getUserNote(user: String): List<Note>
            suspend fun clearUserNote(user: String)
            suspend fun clear()
            suspend fun insertNote(note: Note)
            suspend fun deleteNote(note: Note)
            suspend fun update(note: Note)
        }
        class UserDao {
            suspend fun insert(user: User)
            suspend fun getUserByUsername(username: String): User?
            suspend fun update(user: User)
        }
    }

    package database {
        class EventsDatabase {
            abstract fun eventDao(): EventDao
            fun getDatabase(context: Context): EventsDatabase
        }
        class NotesDatabase {
            abstract fun noteDao(): NoteDao
            fun getDatabase(context: Context): NotesDatabase
        }
        class UserDatabase {
            abstract fun userDao(): UserDao
            fun getDatabase(context: Context): UserDatabase
        }
    }

    package entities {
        class Event {
            var id: Int
            var title: String
            var dateTime: Long
            var color: String
            var status: Boolean
            var user: String
        }
        class Note {
            var id: Int
            var title: String
            var dateTime: Long
            var noteText: String
            var imagePath: String
            var user: String
        }
        class User {
            var username: String
            var password: String
            var image: String
        }
    }

    package ui {
        package dashboard {
            class EventFragment {
            private var _binding: FragmentDashboardBinding?
                private lateinit var eventsDatabase: EventsDatabase
                private lateinit var eventsRecyclerView: RecyclerView
                private lateinit var eventsAdapter: EventsAdapter
                private lateinit var eventsList: MutableList<Event>
                private val databaseViewModel: DatabaseViewModel by activityViewModels()
                private val binding get()

                override fun onClickItem(event: Event)
                override fun onLongClickItem(event: Event, position: Int)
                override fun onCheckClickItem(isCheck: Boolean, event: Event)
                override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View
                override fun onViewCreated(view: View, savedInstanceState: Bundle?)
                override fun onDestroyView()
                private fun showPopupMenu(view: View)
                private fun refreshFragment()
                private fun deleteEvent(event: Event)
                private fun showAddTaskDialog()
                private fun getEvents()
                private fun saveEventToDatabase(event: Event)
            }
            class EventsAdapter {
                private lateinit var itemView: View
                interface MyClickListener
                inner class EventViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)
                override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): EventViewHolder
                override fun onBindViewHolder(holder: EventViewHolder, position: Int)
                override fun getItemCount(): Int
            }
            EventFragment ..|> EventsAdapter
        }
        package editnote {
            class EditNoteFragment {
                private var EDIT_NOTE
                private val REQUEST_CODE_PICK_IMAGE
                private val REQUEST_CODE_READ_STORAGE
                private var _binding: FragmentNoteEditBinding?
                private val databaseViewModel: DatabaseViewModel by activityViewModels()
                private val binding get()
                private lateinit var inputNoteTitle: EditText
                private lateinit var inputNoteText: EditText
                private lateinit var textDateTime: TextView
                private lateinit var save: Button
                private lateinit var  note: Note
                private var imageUriNote: String
                override fun onCreate(savedInstanceState: Bundle?)
                override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,savedInstanceState: Bundle?): View
                override fun onViewCreated(view: View, savedInstanceState: Bundle?)
                private fun undoBackground()
                private fun showShareDialog()
                private fun saveNote()
                private fun saveNoteToDatabase(note: Note)
                private fun updateNoteToDatabase(note: Note)
                override fun onDestroyView()
                private fun pickImageFromGallery()
                override fun onRequestPermissionsResult(requestCode: Int,permissions: kotlin.Array<out String>,grantResults: IntArray)
                override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)
                private fun setBackground(imageUri: Uri)
            }
        }
        package home {
            class HomeFragment {
                private var _binding: FragmentHomeBinding?
                private lateinit var notesDatabase: NotesDatabase
                private lateinit var notesRecyclerView: RecyclerView
                private lateinit var notesAdapter: NotesAdapter
                private lateinit var noteList: MutableList<Note>
                private val databaseViewModel: DatabaseViewModel by activityViewModels()
                private val binding get()
                override fun onClickItem(note: Note)
                override fun onLongClickItem(note: Note, position: Int)
                override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,savedInstanceState: Bundle?): View?
                override fun onViewCreated(view: View, savedInstanceState: Bundle?)
                override fun onDestroyView()
                private fun showPopupMenu(view: View)
                private fun refreshFragment()
                private fun deleteNotes(note: Note)
                private fun getNotes()
                private fun getNotesByKeyword(keyword: String)
            }
            class NotesAdapter {
                lateinit var itemView: View
                interface MyClickListener
                inner class NoteViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)
                override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NoteViewHolder
                override fun onBindViewHolder(holder: NoteViewHolder, position: Int)
                override fun getItemCount(): Int
            }
            HomeFragment ..|> NotesAdapter
        }
        package notifications {
            class NotificationsFragment {
                private lateinit var eventsDatabase: EventsDatabase
                private lateinit var eventsList: MutableList<Event>
                private lateinit var calendarView: CalendarView
                private lateinit var recyclerView: RecyclerView
                private lateinit var notificationsAdapter: NotificationsAdapter
                private val databaseViewModel: DatabaseViewModel by activityViewModels()
                override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,savedInstanceState: Bundle?): View?
                private fun getEventsByTime(startDate: Long, endDate: Long)
            }
            class NotificationsAdapter{
                interface MyClickListener
                override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DaysViewHolder
                override fun onBindViewHolder(holder: DaysViewHolder, position: Int)
                override fun getItemCount(): Int
                class DaysViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)
            }
            NotificationsFragment ..|> NotificationsAdapter
        }
        package profile {
            class ProfileFragment {
                private val REQUEST_CODE_PICK_IMAGE_FOR_BACKGROUND
                private val REQUEST_CODE_READ_STORAGE
                private val REQUEST_CODE_PICK_IMAGE_FOR_PORTRAIT
                private val REQUEST_CODE_READ_STORAGE_PORTRAIT
                private val databaseViewModel: DatabaseViewModel by activityViewModels()
                private var loggedIn: Boolean
                private fun refreshFragment()
                override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,savedInstanceState: Bundle?): View?
                private fun showLoginDialog()
                private fun showRegisterDialog()
                private fun pickImageFromGallery(REQUEST_CODE: Int)
                override fun onRequestPermissionsResult(requestCode: Int,permissions: kotlin.Array<out String>,grantResults: IntArray)
                override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)
                private fun savePortrait(imageUri: Uri)
                private fun setPortrait(imageUri: Uri)
                private fun setBackground(imageUri: Uri)
            }
        }
        class DatabaseViewModel {
            val eventsDatabase: EventsDatabase = EventsDatabase.getDatabase(application)
            val notesDatabase: NotesDatabase = NotesDatabase.getDatabase(application)
            val userDatabaase: UserDatabase = UserDatabase.getDatabase(application)
            var username: String = ""
        }
    }


    NotesDatabase ..> NoteDao
    NotesDatabase ..> Note
    EventsDatabase ..> EventDao
    EventsDatabase ..> Event
    UserDatabase ..> UserDao
    UserDatabase ..> User
    DatabaseViewModel ..> database

    notifications .--[hidden] profile
    editnote .--[hidden] home
    profile --[hidden] DatabaseViewModel
}

@enduml